// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Api.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ITMApiRoot

@implementation ITMApiRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ITMApiRoot_FileDescriptor

static GPBFileDescriptor *ITMApiRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"iterm2"
                                                 objcPrefix:@"ITM"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - ITMRequest

@implementation ITMRequest

@dynamic hasType, type;

typedef struct ITMRequest__storage_ {
  uint32_t _has_storage_[1];
  ITMRequest_Type type;
} ITMRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = ITMRequest_Type_EnumDescriptor,
        .number = ITMRequest_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ITMRequest__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMRequest class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ITMRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum ITMRequest_Type

GPBEnumDescriptor *ITMRequest_Type_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "GetBuffer\000";
    static const int32_t values[] = {
        ITMRequest_Type_GetBuffer,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ITMRequest_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ITMRequest_Type_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ITMRequest_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case ITMRequest_Type_GetBuffer:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ITMGetBufferRequest

@implementation ITMGetBufferRequest

@dynamic hasScreenContentsOnly, screenContentsOnly;
@dynamic hasTrailingLines, trailingLines;

typedef struct ITMGetBufferRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t trailingLines;
} ITMGetBufferRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "screenContentsOnly",
        .dataTypeSpecific.className = NULL,
        .number = ITMGetBufferRequest_FieldNumber_ScreenContentsOnly,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "trailingLines",
        .dataTypeSpecific.className = NULL,
        .number = ITMGetBufferRequest_FieldNumber_TrailingLines,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ITMGetBufferRequest__storage_, trailingLines),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMGetBufferRequest class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ITMGetBufferRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ITMGetBufferResponse

@implementation ITMGetBufferResponse

@dynamic hasRange, range;
@dynamic compactScreenLinesArray, compactScreenLinesArray_Count;

typedef struct ITMGetBufferResponse__storage_ {
  uint32_t _has_storage_[1];
  ITMLineRange *range;
  NSMutableArray *compactScreenLinesArray;
} ITMGetBufferResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "range",
        .dataTypeSpecific.className = GPBStringifySymbol(ITMLineRange),
        .number = ITMGetBufferResponse_FieldNumber_Range,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ITMGetBufferResponse__storage_, range),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "compactScreenLinesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ITMCompactScreenLine),
        .number = ITMGetBufferResponse_FieldNumber_CompactScreenLinesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ITMGetBufferResponse__storage_, compactScreenLinesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMGetBufferResponse class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ITMGetBufferResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ITMLineRange

@implementation ITMLineRange

@dynamic hasLocation, location;
@dynamic hasLength, length;

typedef struct ITMLineRange__storage_ {
  uint32_t _has_storage_[1];
  int64_t location;
  int64_t length;
} ITMLineRange__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "location",
        .dataTypeSpecific.className = NULL,
        .number = ITMLineRange_FieldNumber_Location,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ITMLineRange__storage_, location),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "length",
        .dataTypeSpecific.className = NULL,
        .number = ITMLineRange_FieldNumber_Length,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ITMLineRange__storage_, length),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMLineRange class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ITMLineRange__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ITMCompactScreenLine

@implementation ITMCompactScreenLine

@dynamic hasText, text;
@dynamic codePointsPerCellArray, codePointsPerCellArray_Count;

typedef struct ITMCompactScreenLine__storage_ {
  uint32_t _has_storage_[1];
  NSString *text;
  NSMutableArray *codePointsPerCellArray;
} ITMCompactScreenLine__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = ITMCompactScreenLine_FieldNumber_Text,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ITMCompactScreenLine__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "codePointsPerCellArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ITMCodePointsPerCell),
        .number = ITMCompactScreenLine_FieldNumber_CodePointsPerCellArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ITMCompactScreenLine__storage_, codePointsPerCellArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMCompactScreenLine class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ITMCompactScreenLine__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ITMCodePointsPerCell

@implementation ITMCodePointsPerCell

@dynamic hasNumCodePoints, numCodePoints;
@dynamic hasRepeats, repeats;

typedef struct ITMCodePointsPerCell__storage_ {
  uint32_t _has_storage_[1];
  int32_t numCodePoints;
  int32_t repeats;
} ITMCodePointsPerCell__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueInt32 = 1,
        .core.name = "numCodePoints",
        .core.dataTypeSpecific.className = NULL,
        .core.number = ITMCodePointsPerCell_FieldNumber_NumCodePoints,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(ITMCodePointsPerCell__storage_, numCodePoints),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .core.dataType = GPBDataTypeInt32,
      },
      {
        .defaultValue.valueInt32 = 0,
        .core.name = "repeats",
        .core.dataTypeSpecific.className = NULL,
        .core.number = ITMCodePointsPerCell_FieldNumber_Repeats,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(ITMCodePointsPerCell__storage_, repeats),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMCodePointsPerCell class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(ITMCodePointsPerCell__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
